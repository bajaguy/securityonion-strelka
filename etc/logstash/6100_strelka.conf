# Logstash config file to parse scan results from Strelka (https://github.com/target/strelka) on Security Onion
#
# Author: Wes Lambert, wlambertts@gmail.com

filter {
  if "strelka" in [tags] {

    # Parse initial message
    json {
      source => "message"
    }
    
    # Extract and rename exiftoolMetadata stuff
    if [results][0][exiftoolMetadata][exiftool] {
      ruby {
        #code => "event.get('[results][0][exiftoolMetadata][exiftool]').each {|hash| event.set('[exiftoolMetadata][' + hash['field'] + ']', hash['value']) };"  
        code => "event.get('[results][0][exiftoolMetadata][exiftool]').each {|hash| event.set(hash['field'].downcase, hash['value']) };"
      }
      mutate {
        rename => { "characterset" => "character_set" }
        rename => { "codesize" => "code_size" }
        rename => { "companyname" => "company_name" }
	rename => { "elapsedTime" => "elapsed_time" }
	rename => { "exiftoolversion" => "exiftool_version" }
        rename => { "filedescription" => "file_description" }
        rename => { "fileflags" => "file_flags" }
        rename => { "fileflagsmask" => "file_flags_mask" }
        rename => { "fileos" => "file_os" }
        rename => { "filesize" => "file_size" }
        rename => { "filesubtype" => "file_subtype" }
        rename => { "filetypeextension" => "filetype_extension" }
        rename => { "fileversionnumber" => "fileversion_number" }
	rename => { "finishTime" => "finish_time" }
        rename => { "imageversion" => "image_version" }
        rename => { "initializeddatasize" => "initialized_datasize" }
        rename => { "linkerversion" => "linker_version" }
        rename => { "mimetype" => "file_mimetype" }
        rename => { "objectfiletype" => "object_filetype" }
        rename => { "originalfilename" => "original_filename" }
        rename => { "petype" => "pe_type" }
        rename => { "productversionnumber" => "productversion_number" }
	rename => { "startTime" => "start_time" }
        rename => { "subsystemversion" => "subsystem_version" }
        rename => { "uninitializeddatasize" => "uninitialized_datasize" }
        # Entrypoint is redundant and file attributes are bogus given extraction
        remove_field => [ "entrypoint", "fileaccessdate", "fileinodechangedate", "filemodifydate", "filepermissions", "machinetype" ]
      }
    }
    #ruby {
    #    code => "event.get('[results][0][peMetadata][sections]').each {|hash| event.set('[testfield][' + hash['name'].gsub('.', '') + ']', hash['name']) };"  
        #code => "event.get('[results][0][peMetadata][sections]').each {|hash| event.set(hash['name'].gsub('.',''), hash['value']) };"
#      }
    #ruby {
    #    code => "event.get('[results][0][peMetadata][sections]').each {|hash| event.set('[testfield][' + hash['name'].gsub('.', '') + '][structure]', hash['structure']) };"
        #code => "event.get('[results][0][peMetadata][sections]').each {|hash| event.set(hash['name'].gsub('.',''), hash['value']) };"
    #  }

    # Move some stuff around
    mutate {
      add_field => { "type" => "strelka" }
      rename => { "[results][0][flags]" => "flags" }
      # Begin map of scan_entropy.py
      rename => { "[results][0][entropyMetadata][entropy]" => "entropy" }
      # Begin map of scan_self.py
      rename => { "[results][0][selfMetadata][location]" => "source_location" }
      rename => { "[results][0][selfMetadata][filename]" => "extracted_filename" }
      rename => { "[results][0][selfMetadata][depth]" => "source_depth" }
      rename => { "[results][0][selfMetadata][uid]" => "source_uid" }
      rename => { "[results][0][selfMetadata][parentUid]" => "source_parentuid" }
      rename => { "[results][0][selfMetadata][rootUid]" => "source_rootuid" }
      rename => { "[results][0][selfMetadata][hash]" => "source_hash" }
      rename => { "[results][0][selfMetadata][parentHash]" => "source_parenthash" }
      rename => { "[results][0][selfMetadata][rootHash]" => "source_roothash" }
      #rename => { "[results][0][selfMetadata][source]" => "source_source" }
      rename => { "[results][0][selfMetadata][scannerList]" => "source_scannerlist" }
      rename => { "[results][0][selfMetadata][size]" => "source_size" }
      # Begin map of scan_hash.py
      rename => { "[results][0][hashMetadata][md5]" => "md5" }
      rename => { "[results][0][hashMetadata][sha1]" => "sha1" }
      rename => { "[results][0][hashMetadata][sha256]" => "sha256" }
      rename => { "[results][0][hashMetadata][ssdeep]" => "ssdeep" }
      # Begin map of scan_pe.py
      rename => { "[results][0][peMetadata][dllCharacteristics]" => "dll_characteristics" }
      rename => { "[results][0][peMetadata][entryPoint]" => "entry_point" }
      rename => { "[results][0][peMetadata][exportFunctions]" => "export_functions" }
      rename => { "[results][0][peMetadata][heapCommitSize]" => "heap_commitsize" }
      rename => { "[results][0][peMetadata][heapReserveSize]" => "heap_reservesize" }
      rename => { "[results][0][peMetadata][imageBase]" => "image_base" }
      rename => { "[results][0][peMetadata][imageCharacteristics]" => "image_characteristics" }
      rename => { "[results][0][peMetadata][imageMagic]" => "image_magic" }
      rename => { "[results][0][peMetadata][imphash]" => "imphash" }
      rename => { "[results][0][peMetadata][importFunctions]" => "import_functions" }
      rename => { "[results][0][peMetadata][imports]" => "imports" }
      rename => { "[results][0][peMetadata][machine][type]" => "machine_type" }
      rename => { "[results][0][peMetadata][machine][id]" => "machine_id" }
      rename => { "[results][0][peMetadata][nb10]" => "nb10" }
      rename => { "[results][0][peMetadata][resources]" => "resources" }
      rename => { "[results][0][peMetadata][rsds]" => "rsds" }
      rename => { "[results][0][peMetadata][sections]" => "sections" }
      rename => { "[results][0][peMetadata][stackCommitSize]" => "stack_commit_size" }
      rename => { "[results][0][peMetadata][stackReserveSize]" => "stack_reserve_size" }
      rename => { "[results][0][peMetadata][subsystem]" => "subsystem" }
      rename => { "[results][0][peMetadata][timestamp]" => "fileheader_timestamp" }
      rename => { "[results][0][peMetadata][total][sections]" => "total_sections" }
      rename => { "[results][0][peMetadata][warnings]" => "warnings" }
      # Begin map of scan_header.py
      rename => { "[results][0][headerMetadata][header]" => "header" }
      # Begin map of flavors in distribution.py
      rename => { "[results][0][flavors][mime]" => "mimetype" }
      rename => { "[results][0][flavors][yara]" => "yara" }
      rename => { "[results][0][flavors][external]" => "external" }
      # Add new field to be parsed below
      add_field => { "parse_filename" => "%{extracted_filename}" }
      remove_field => [ "[results][0][exiftoolMetadata]", "[results][0][selfMetadata]", "[results][0][hashMetadata]", "[results][0][peMetadata]", "[results][0][headerMetadata]", "[results][0][flavors]", "[results][0][entropyMetadata]" ]
      remove_field => [ "host", "results", "sourcefile", "directory", "filename" , "source" ]
      remove_tag => [ "beat" ]
    }
    # Parse bro source and fuid based on file-extraction naming convention
    mutate {
      gsub => [ "parse_filename", "\.", "-" ]
      split => [ "parse_filename" , "-"]
      add_field => [ "source", "%{[parse_filename][0]}" ]
      add_field => [ "fuid", "%{[parse_filename][1]}" ]
      remove_field => [ "parse_filename" ]
    }
  }
}
